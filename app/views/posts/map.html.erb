<div id="map-container" class="h-screen w-screen flex flex-col">
  <input id="address" type="textbox" value="" class="m-2.5">
  <input type="button" value="送信" onclick="codeAddress()" class="m-2.5">
  <input type="button" value="現在地を表示" onclick="showCurrentLocation()" class="m-2.5">
  <div id="map" class="flex-grow w-full"></div>
</div>

<dialog id="post_modal" class="modal">
    <div class="modal-box bg-white">
        <div class="post_show"></div>
    </div>
</dialog>

<script>
let map, marker;

const latlngDis = document.getElementById('latlngDisplay');
const addressDis = document.getElementById('addressDisplay');
const iconImage = 'https://maps.google.com/mapfiles/ms/micons/yellow-dot.png';
const currentLocation = 'https://www.google.com/mapfiles/marker.png';

function initMap() {
  const geocoder = new google.maps.Geocoder();

  map = new google.maps.Map(document.getElementById('map'), {
    zoom: 12,
  });

  showCurrentLocation();
  setShopMarkers();

  document.addEventListener('click', function(event) {
    const modal = document.getElementById('post_modal');
    if (event.target === modal) {
      modal.close();
    }
  });
}

function setShopMarkers() {
  <% @posts.each do |post| %>
    (() => {
      let shopMarker = new google.maps.Marker({
        position: {lat: <%= post.shop.latitude %>, lng: <%= post.shop.longitude %>}, 
        map: map,
        title: '<%= j post.shop.name %>',
        icon: iconImage
      });

      shopMarker.addListener('click', function() {
        const modalContent = `
        <% if user_signed_in? %>
          <div class="flex justify-end mb-2">
            <div class="flex items-center mr-1">
              <div class="mr-1">
                <%= render 'posts/like_buttons', { post: post } %>
              </div>
              <div class="text-xs text-gray-500 w-[2ch] text-left cursor-pointer hover:underline" onclick="like_modal_<%= post.id %>.showModal()" id="like-count-<%= post.id %>">
                <%= post.likes.count %>
              </div>
              <%= render 'posts/like_modal', post: post %>
            </div>
            <% if post.user != current_user %>
              <div class="sm:mr-3">
                <%= render 'bookmark_buttons', { post: post } %>
              </div>
            <% end %>
          </div>
        <% else %>
          <div class="flex items-center justify-end mb-2">
            <div class="text-sweetDeep mr-1">
              <i class="far fa-heart text-[18px] sm:text-[20px]"></i>
            </div>
            <div class="text-xs text-gray-500 w-[2ch] text-left" id="like-count-<%= post.id %>">
              <%= post.likes.count %>
            </div>
          </div>
        <% end %>
        <div class='text-center'>
          <div class='text-xs sm:text-[12px] text-subtleText'><%= t("enums.post.category.#{post.category}") %></div>
          <div class='text-lg sm:text-[18px] font-semibold'><%= post.shop.name %></div>
        </div>
        <div class='flex justify-center'>
          <% if post.image.present? %>
            <%= image_tag post.image.variant(resize_to_fill: [800, 800], format: :webp), class: 'object-cover w-60 h-60 mt-3' %>
          <% else %>
          <% end %>
        </div>
        <div class='flex flex-col items-center justify-center mt-4'>
          <div class="mb-4 flex justify-center space-x-1">
            <% Post.overall_ratings.size.times do |i| %>
              <span 
                class="inline-block w-6 h-6 sm:w-7 sm:h-7 mask mask-star-2 <%= i < Post.overall_ratings[post.overall_rating] ? 'bg-accent' : 'bg-placeholder' %>"
                aria-hidden="true"
              ></span>
            <% end %>
          </div>
          <div class="flex flex-wrap items-center mb-3 text-sm sm:text-[18px] text-center sm:text-left">
            <div class="flex items-center">
              <div class="tooltip" data-tip="<%= t("tooltips.sweetness", percentage: post.sweetness_percentage) %>">
                <span class="badge text-xs sm:text-sm py-2 sm:py-2.5 <%= sweetness_badge_color(post.sweetness) %> mr-0.5 sm:mr-1"><%= t("enums.post.sweetness.#{post.sweetness}") %></span>
              </div>
            </div>
            <div class="flex items-center">
              <div class="tooltip" data-tip="<%= t("tooltips.firmness", percentage: post.firmness_percentage) %>">
                <span class="badge text-xs sm:text-sm py-2 sm:py-2.5 <%= firmness_badge_color(post.firmness) %>"><%= t("enums.post.firmness.#{post.firmness}") %></span>
              </div>
            </div>
          </div>
        </div>
        <div class="flex items-center justify-center">
          <div class="text-left max-w-md mx-4 sm:mx-6">
            <p class="my-2 text-sm sm:text-[16px] text-subtleText">
              <i class="fa fa-map-marker-alt mr-2 text-accent"></i><%= post.shop.address %>
            </p>
            <div class='my-3 text-text text-opacity-80'>
              <p><%= post.body.truncate(55) %></p>
            </div>
          </div>
        </div>
        <div class='text-right mt-1 mr-1'>
          <%= link_to "詳細", post_path(post), class: "text-[12px] sm:text-[14px] text-accent underline focus:outline-none focus-visible:outline-none" %>
        </div>
        `;
        document.querySelector('.post_show').innerHTML = modalContent;
        document.getElementById('post_modal').showModal();
      });
    })();
  <% end %>
}

function codeAddress() {
    const geocoder = new google.maps.Geocoder();
    const inputAddress = document.getElementById('address').value;
    geocoder.geocode({ 'address': inputAddress }, function(results, status) {
        if (status === 'OK') {
        map.setCenter(results[0].geometry.location);
        marker.setPosition(results[0].geometry.location);
        latlngDis.innerHTML = `Latitude: ${results[0].geometry.location.lat()}, Longitude: ${results[0].geometry.location.lng()}`;
        addressDis.innerHTML = results[0].formatted_address;
        } else {
        alert("該当する結果がありませんでした：" + status);
        }
    });
}

function showCurrentLocation(){
    // ユーザーの現在地を取得してマップに設定
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
        const userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
        };
        map.setCenter(userLocation);
        if (marker) {
            marker.setMap(null);
        }
        
        // 新しいマーカーを作成
        marker = new google.maps.Marker({
            position: userLocation,
            map: map,
            icon: currentLocation // 現在地用のアイコンを使用
        });
        latlngDis.innerHTML = `Latitude: ${userLocation.lat}, Longitude: ${userLocation.lng}`;
        }, function() {
        alert('位置情報の取得に失敗しました。');
        map.setCenter({ lat: 35.6803997, lng: 139.7690174 }); // 東京の座標
        });
    } else {
      // Geolocationがサポートされていないブラウザの場合
        alert('お使いのブラウザでは地理位置情報の取得がサポートされていません。');
      map.setCenter({ lat: 35.6803997, lng: 139.7690174 }); // 東京の座標
    };
}

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&callback=initMap" async defer></script>